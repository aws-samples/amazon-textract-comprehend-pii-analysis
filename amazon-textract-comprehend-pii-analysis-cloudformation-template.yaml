AWSTemplateFormatVersion: 2010-09-09
Parameters:
  SrcBucketName:
    Type: String
    Default: source-s3-sink
    Description: Enter the source S3 bucket where the images/pdfs/documents would be uploaded.
  ResultDynamoDBTableName:
    Type: String
    Default: pii-data
    Description: Enter the DynamoDB table name where the PII identification information would be stored.
  AwsRegion:
    Type: String
    Default: us-east-1
    Description: Enter the AWS region for hosting the application
  EnvName:
    Type: String
    Default: dev
    Description: Enter the environment tag for hosting the application
Resources:
  TextractProcessingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - textract.amazonaws.com
                - comprehend.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: PolicyForRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutBucketNotification'
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${SrcBucketName}'
                  - !Sub 'arn:aws:s3:::${SrcBucketName}/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - !Sub ':table/${ResultDynamoDBTableName}'
              - Effect: Allow
                Action:
                  - 'textract:DetectDocumentText'
                  - 'textract:AnalyzeDocument'
                  - 'textract:GetDocumentTextDetection'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'comprehend:DetectPiiEntities'
                  - 'comprehend:DetectKeyPhrases'
                Resource: '*'
  TextractCompreProcessLambda:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - TextractProcessingRole
    Properties:
      Architectures: [arm64]
      Description: Triggered by notification from S3 after the document has been uploaded
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt
        - TextractProcessingRole
        - Arn
      Runtime: python3.9
      Timeout: 600
      Environment:
        Variables:
          env:
            Fn::Sub: ${EnvName}
          aws_region:
            Fn::Sub: ${AwsRegion}
          dynamodb_table:
            Fn::Sub: ${ResultDynamoDBTableName}
          universal_pii_types:
            '["ADDRESS", "AGE", "AWS_ACCESS_KEY", "AWS_SECRET_KEY", "CREDIT_DEBIT_CVV", "CREDIT_DEBIT_EXPIRY", "CREDIT_DEBIT_NUMBER", "DATE_TIME", "DRIVER_ID", "EMAIL", "INTERNATIONAL_BANK_ACCOUNT_NUMBER", "IP_ADDRESS", "LICENSE_PLATE", "MAC_ADDRESS", "NAME", "PASSWORD", "PHONE", "PIN", "SWIFT_CODE", "URL", "USERNAME", "VEHICLE_IDENTIFICATION_NUMBER"]'
          country_pii_types:
            '["CA_HEALTH_NUMBER", "CA_SOCIAL_INSURANCE_NUMBER", "IN_AADHAAR", "IN_NREGA", "IN_PERMANENT_ACCOUNT_NUMBER", "IN_VOTER_NUMBER", "UK_NATIONAL_HEALTH_SERVICE_NUMBER", "UK_NATIONAL_INSURANCE_NUMBER", "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER", "BANK_ACCOUNT_NUMBER", "BANK_ROUTING", "PASSPORT_NUMBER", "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER", "SSN"]'
          language_code:
            'en'
      Code:
        ZipFile: |
          import boto3
          import logging
          import os
          
          # Retrieve environment variables
          region_name = os.getenv(key='aws_region', default='us-east-1')
          ddb_table = os.getenv(key='dynamodb_table')
          uni_pii_list = os.getenv(key='universal_pii_types')
          country_pii_list = os.getenv(key='country_pii_types')
          
          # Create objects of Amazon Textract, Comprehend, S3, and DynamoDB
          textract_obj = boto3.client('textract', region_name=region_name)
          comprehend_obj = boto3.client('comprehend', region_name=region_name)
          s3_obj = boto3.client('s3', region_name=region_name)
          ddb_obj = boto3.resource('dynamodb', region_name=region_name).Table(ddb_table)
          
          # Logging functionality
          logging.basicConfig(level=logging.DEBUG, datefmt='%H:%M:%S', format='%(levelname)s: %(module)s:%(funcName)s:%(lineno)d: %(asctime)s: %(message)s')
          LOG = logging.getLogger(__name__)
          
          # Language code - as an input to Comprehend
          LANG_EN = os.getenv(key='language_code', default='en')
          
          def lambda_handler(event, context):
            """
            :param event: The event consists of the file name uploaded to the source S3 bucket.
            :param context:
            :return: The lambda processes the document uploaded through S3 bucket and calls Textract & Comprehend services.
            """
            bucket_name = event['Records'][0]['s3']['bucket']['name']
            key_name = event['Records'][0]['s3']['object']['key']
            file_name = str(event['Records'][0]['s3']['bucket']['name']) + '/' + str(event['Records'][0]['s3']['object']['key'])
            LOG.info(f'File name is {file_name}')
            response = textract_obj.detect_document_text(Document={'S3Object': {'Bucket': bucket_name, 'Name': key_name}})
            LOG.info(f'Response is {response}')
            
            textract_resp_text = ''
            for item in response['Blocks']:
              if item['BlockType'] == 'LINE':
                textract_resp_text = textract_resp_text + ' ' + item['Text']
          
            if textract_resp_text:
              comprehend_entities = comprehend_obj.detect_pii_entities(Text=textract_resp_text, LanguageCode=LANG_EN)
              LOG.info('Comprehend Entities', comprehend_entities)
              buffer_list = []
              for entity in comprehend_entities['Entities']:
                LOG.info('Entity Type: '.format(entity['Type']))
                if entity['Type'] in uni_pii_list or country_pii_list:
                  LOG.info('PII information captured in the document')
                  buffer_list.append({'Type': entity['Type'], 'Confidence': entity['Score']})
            
              LOG.info(buffer_list)
              if len(buffer_list) > 0:
                ddb_obj.put_item(Item={'file_name': key_name, 'pii_confidence': str(buffer_list)})
              else:
                LOG.error(f'No PII data is captured from the document {key_name}')
            
            else:
              LOG.error(f'The document {key_name} is not processed!!')
      Tags:
        - Key: 'lambda:createdBy'
          Value: 'CloudFormation'
  S3InvokeLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TextractCompreProcessLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${SourceBucketName}'
  SourceBucketName:
    Type: 'AWS::S3::Bucket'
    DependsOn: TextractCompreProcessLambda
    Properties:
      BucketName: !Ref SrcBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ApplyNotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: S3BucketNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowBucketNotification
                Effect: Allow
                Action: s3:PutBucketNotification
                Resource:
                  - !Sub 'arn:aws:s3:::${SourceBucketName}'
                  - !Sub 'arn:aws:s3:::${SourceBucketName}/*'
  ApplyBucketNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: [arm64]
      Description: Function to log the event notification received
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt 'ApplyNotificationFunctionRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import boto3
          import logging
          import json
          import cfnresponse

          s3Client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          def addBucketNotification(bucketName, notificationId, functionArn):
            notificationResponse = s3Client.put_bucket_notification_configuration(
              Bucket=bucketName,
              NotificationConfiguration={
                'LambdaFunctionConfigurations': [
                  {
                    'Id': notificationId,
                    'LambdaFunctionArn': functionArn,
                    'Events': [
                      's3:ObjectCreated:*'
                    ]
                  },
                ]
              }
            )
            return notificationResponse

          def create(properties, physical_id):
            bucketName = properties['S3Bucket']
            notificationId = properties['NotificationId']
            functionArn = properties['FunctionARN']
            response = addBucketNotification(bucketName, notificationId, functionArn)
            logger.info('AddBucketNotification response: %s' % json.dumps(response))
            return cfnresponse.SUCCESS, physical_id

          def update(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def delete(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def handler(event, context):
            logger.info('Received event: %s' % json.dumps(event))

            status = cfnresponse.FAILED
            new_physical_id = None

            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')

              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              logger.error('Exception: %s' % e)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)
  ApplyNotification:
    Type: Custom::ApplyNotification
    Properties:
      ServiceToken: !GetAtt 'ApplyBucketNotificationFunction.Arn'
      S3Bucket: !Ref 'SourceBucketName'
      FunctionARN: !GetAtt 'TextractCompreProcessLambda.Arn'
      NotificationId: S3ObjectCreatedEvent
  DynamoDBResultTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: file_name
          AttributeType: S
        - AttributeName: pii_confidence
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: file_name
          KeyType: HASH
        - AttributeName: pii_confidence
          KeyType: RANGE
      TableName: !Ref ResultDynamoDBTableName
